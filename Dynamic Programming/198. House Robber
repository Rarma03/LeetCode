int traverse(vector<int>& nums,int n ){
    //base case
    if(n<0){return 0;}
    if(n==0){return nums[0];}

    int include = traverse(nums,n-2) + nums[n];
    int exclude = traverse(nums,n-1) + 0;

    return max(include,exclude);
}
int traverse_memoisation(vector<int>& nums,int n ,vector<int>& dp){
    //base case
    if(n<0){return 0;}
    if(n==0){return nums[0];}
    if(dp[n]!=-1){return dp[n];}

    int include = traverse(nums,n-2) + nums[n];
    int exclude = traverse(nums,n-1) + 0;
    
    dp[n] = max(include,exclude); 
    return dp[n];
}
int traverse_tabulation(vector<int>& nums){
    int n=nums.size();
    vector<int> dp(n,0);

    dp[0]=nums[0];

    for(int i=1;i<n;i++){
        int include=dp[i-2]+nums[i];
        int exclude=dp[i-1]+0;
        dp[i]=max(include,exclude);
    }
    return dp[n-1];
}
class Solution {
public:
    int rob(vector<int>& nums) {
        // vector<int> dp(nums.size(),-1);
        return traverse_tabulation(nums);
    }
};
