 int firstocc(vector<int>& arr, int low, int high, int key)
{
    int ans=-1;
    while (low <= high)
    {
        int mid = low + (high - low) / 2;
        if (arr[mid] == key)
        {
            ans = mid;
            high = mid - 1;
        }
        else if (arr[mid] < key)
        {
            low = mid + 1;
        }
        else
        {
            high = mid - 1;
        }
    }
    return ans;
}

int lastocc(vector<int>& arr, int low, int high, int key)
{
    int ans=-1;
    while (low <= high)
    {
        int mid = low + (high - low) / 2;
        if (arr[mid] == key)
        {
            ans = mid;
            low = mid + 1;
        }
        else if (arr[mid] < key)
        {
            low = mid + 1;
        }
        else
        {
            high = mid - 1;
        }
    }
    return ans;
}
class Solution {
public:
    vector<int> searchRange(vector<int>& nums, int target) {
    
    vector<int> v;
        v.push_back(firstocc(nums,0,nums.size()-1,target));
        v.push_back(lastocc(nums,0,nums.size()-1,target));
        return v;
    }
};
