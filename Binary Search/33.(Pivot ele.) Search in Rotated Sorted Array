//Firstly we calculate the pivot element
int get_pivot(vector<int>& n){
    int l=0,r=n.size()-1;
    int mid=l+(r-l)/2;
    while(l<r){
        if(n[mid] >= n[0]){
            l=mid+1;
        }
        else{
            r=mid;
        }
        mid=l+(r-l)/2;
    }
    return l;
}
//Implemented Binary search
int binary_search(vector<int>& arr,int l,int r,int target){
    while(l<=r){
        int mid=l+(r-l)/2;
        if(arr[mid]==target){
            return mid;
        }
        else if(arr[mid]>target){
            r=mid-1;
        }
        else{
            l=mid+1;
        }
    }
    return -1;
}
class Solution {
public:
    int search(vector<int>& n, int target) {
        int pivot_pos=get_pivot(n);
        if(target>=n[pivot_pos] && target<=n[n.size()-1]){
            return binary_search(n,pivot_pos,n.size()-1,target);
        }
        else{            
            return binary_search(n,0,pivot_pos,target);
        }
        return -1;
    }
};
