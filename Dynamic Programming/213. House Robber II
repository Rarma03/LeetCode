class Solution {
public:
    int max_non_adj(vector<int>& n,int a){
        int prev=n[0];
        int prev1=0;

        int ans=max(prev,prev1);

        for(int i=1;i<a;i++){
            int incl=prev1+n[i];
            int excl=prev+0;

            ans=max(incl,excl);

            prev1=prev;
            prev=ans;
        }

        return ans;
    }
    int rob(vector<int>& n) {
        int a=n.size();        

        if(a==1){
            return n[0];
        }

        vector<int> first,second;

        for(int i=0;i<n.size();i++){
            if(i != 0){
                first.push_back(n[i]);
            }
            if(i != a-1){
                second.push_back(n[i]);
            }
        }

        return max(max_non_adj(first,a-1),max_non_adj(second,a-1));
    }
};
//Alternate Approach
class Solution {
public:
    int max_non_adj(vector<int>& n,int start,int end){
        int prev=n[start];
        int prev1=0;

        int ans=max(prev,prev1);

        for(int i=start+1;i<end;i++){
            int incl=prev1+n[i];
            int excl=prev+0;

            ans=max(incl,excl);

            prev1=prev;
            prev=ans;
        }

        return ans;
    }
    int rob(vector<int>& n) {
        int a=n.size();        

        if(a==1){
            return n[0];
        }        

        return max(max_non_adj(n,0,a-1),max_non_adj(n,1,a));
    }
};
